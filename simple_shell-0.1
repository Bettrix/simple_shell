#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

#define MAX_COMMAND_LENGTH 100

void run_command(char *command) {
    pid_t pid;
    int status;

    pid = fork();
    if (pid < 0) {
        perror("Fork failed");
        exit(1);
    } else if (pid == 0) {
        /* Child process */
        if (execlp(command, command, (char *)NULL) == -1) {
            perror("Execution failed");
            exit(1);
        }
    } else {
        /* Parent process */
        do {
            waitpid(pid, &status, WUNTRACED);
        } while (!WIFEXITED(status) && !WIFSIGNALED(status));
    }
}

int main() {
    char command[MAX_COMMAND_LENGTH];

    while (1) {
        printf("$ "); /* Displaying the prompt */

        if (fgets(command, sizeof(command), stdin) == NULL) {
            /* Handle end of file (Ctrl+D) */
            printf("\n");
            break;
        }

        /* Removing the trailing newline character */
        command[strcspn(command, "\n")] = '\0';

        run_command(command);
    }

    return 0;
}
